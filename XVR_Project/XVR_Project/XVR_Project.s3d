/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
//#include "sys_camera.s3d"

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;


// TODO: put your global variables here


/* Camera globals */
var CamPos = [0.0, 5.0, 30.0]; 	// camera position

/* Light globals */
var Light0;
var PosL = [0.0, 10.0, 10.0];	// default light position


/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);
function DrawPlane(col, min, max);

var file_name = "test.txt";
var text_src = "stockimage.jpg";
var mesh_src = "object.aam";
function OnDownload()
{
	FileDownload(file_name);
	FileDownload(text_src);
	FileDownload(mesh_src);
	
}



function OnInit(params)
{
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();
	
	global var my_texture_foo = CVmTexture(text_src);

	var m_mesh = CVmNewMesh(mesh_src); // The mesh is created from the specified AAM file
   	//m_mesh.CenterBoundingBox();      // Mesh geometry is translated so as to put the origin in the center of the mesh bounding box
   	m_mesh.Normalize(10); 
   	global my_obj = CVmObj(m_mesh);
   	my_obj.SetPosition(10, 0, 10);
}



function OnFrame()
{
	/* manage camera */
	CameraMoveMouse();

	SceneBegin();

	//DrawGrid([0.5, 0.5, 0.5], 100);
	DrawPlane([1,0,0], [-50,-50], [50, 50]);
	//if(FileExists(file_name)) {
		var file_string = LoadFile(file_name);
		//var file_string = FileRead(file_name);
		ConsoleText(0.01,0.86,file_string[0]);
		ConsoleText(0.04,0.90, str(my_texture_foo.components ));
	//}
	
	// TODO: put your drawing code here


	SetActiveTexture(my_texture_foo); 
      glEnable(GL_TEXTURE_2D);
      glBegin(GL_QUADS);
         glNormal(0,0,1);      
         glTexCoord(0,1); 
         glVertex(0,0,0);         
         glTexCoord(1,1);
         glVertex(10,0,0);      
         glTexCoord(1,0);
         glVertex(10,10,0);      
         glTexCoord(0,0);
         glVertex(0,10,0);      
      glEnd(); 
      
    my_obj.Draw();
	SceneEnd();
}



function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	// TODO:
}


function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}

function OnExit()
{
	// TODO: put your cleanup code here
}



// Camera manager (using mouse)
function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_BS();

}



function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}

function DrawPlane(col, min, max)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glDisable(GL_LIGHTING);
	glColor(col);
	
	glBegin(GL_TRIANGLES);
	glVertex(min[0], 0, min[1]);
	glVertex(min[0], 0, max[1]);
	glVertex(max[0], 0, min[1]);
	
	glVertex(max[0], 0, max[1]);
	glVertex(max[0], 0, min[1]);
	glVertex(min[0], 0, max[1]);	
	
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}