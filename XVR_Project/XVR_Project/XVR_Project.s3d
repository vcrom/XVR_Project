/* Include s3d symbols */
#include <Script3d.h>

/*Include our own classes */
#include "Camera.s3d"
#include "SkyBox.s3d"
#include "Terrain.s3d"

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000; 

/* Light globals */
var PosL = [SCENE_FAR/2, SCENE_FAR/2, -SCENE_FAR/2];// default Sun position
var Sun;

/* Other globals */
var map = "map.txt";
var crate = "crate.jpg";
var mesh_src = "object.aam";

var light_mesh = "lamp.AAM";
var castle_mesh = "castle.AAM";
var castle;

//Selecction
set MAX_SEL_LENGTH = 20;
var selectable_ini_position = {[30, 0, 23], [34, 0, 35], [26, 0, 19], [26, 0, 30], [27, 0, 41], [50, 0, 50]};
var lights_of_selectable;
var selectabe_objects;
var selected;
var scaling;
var selected_mat;
var unselected_mat;
var onMouseL;
var onMouseR;

//Holes
var audio_files = {"sounds\\error.wav", "sounds\\correct.wav"};
var audio_sources;
var holes_position = {[60, 3, 52], [5, 0, 62], [2, 0, 60], [2, 3, 62], [3, 0, 11.5], [62, 0, 2]};
var holes_scales = [1, 2, 2, 1, 1, 1];
var virtual_holes;
var in_hole;

//Skybox
var skybox_files = {"skybox\\negx.png", "skybox\\negy.png", "skybox\\negz.png", "skybox\\posx.png", "skybox\\posy.png", "skybox\\posz.png"};
var sky_box;

//Terrain
var wall = "wall.png";
var grass = "grass.png";
var height;
var renderable_terrain;
var crate_texture;

function ScaleObject(index);
function UpdateLightsofSelectable();

function OnDownload() {
	FileDownload(light_mesh);
	for(var i = 0; i < Len(skybox_files); ++i)
		FileDownload(skybox_files[i]);
		
	for(var i = 0; i < Len(audio_files); ++i)
		FileDownload(audio_files[i]);
		
	FileDownload(map);
	FileDownload(mesh_src);
	
	FileDownload(grass);
	FileDownload(wall);
	FileDownload(crate);
}

function OnInit(params) {
	outputln();
	//Initialize Sun
	Sun = CVmLight();
	Sun.SetPosition(PosL);
	Sun.SetAmbient([1, 1, 1]);
	Sun.Enable();
	outputln("Sun initialized!");

	//Initialize  selectable objects and it's materials
	crate_texture = CVmTexture(crate);
	selected_mat = CVmMaterial();
   	selected_mat.ambient   = [0.6, 0.0, 0.0, 1.0];
   	selected_mat.diffuse   = [0.7, 0.8, 0.0, 1.0];
   	selected_mat.specular  = [0.8, 0.8, 0.8, 1.0];
   	selected_mat.SetTexture(crate_texture);
   	selected_mat.shininess = 5;
   	
	unselected_mat = CVmMaterial();
   	unselected_mat.ambient   = [0.4, 0.4, 0.4, 1.0];
   	unselected_mat.diffuse   = [0.6, 0.6, 0.6, 1.0];
   	unselected_mat.specular  = [0.8, 0.8, 0.8, 1.0];
   	unselected_mat.SetTexture(crate_texture);
   	unselected_mat.shininess = 5;
   	
	crate_texture = CVmTexture(crate);
	var n_selectable = Len(selectable_ini_position);
	onMouseL = false;
	selected = array(n_selectable);
	scaling = array(n_selectable);
	selectabe_objects = array(n_selectable);
	lights_of_selectable = array(n_selectable);
	in_hole = array(n_selectable);
	
	for(var i = 0; i < n_selectable; ++i)
	{
		var box_mesh = CVmNewMesh(VRP_BOX, 0, [0,0,0], [2,2,2]);
		box_mesh.CenterBoundingBox();
		selectabe_objects[i] = CVmObj(box_mesh);
		selectabe_objects[i].SetPosition(selectable_ini_position[i]);
		selectabe_objects[i].ForceMaterial(unselected_mat);
		//Atributes
		selected[i] = false;
		in_hole[i] = false;
		scaling[i] = 1;
		ScaleObject(i);
		//Lights
		lights_of_selectable[i] = CVmLight();
		lights_of_selectable[i].SetPosition(selectable_ini_position[i]);
		lights_of_selectable[i].SetDiffuse([1, 0, 0]);
		lights_of_selectable[i].SetSpecular([0.9, 0, 0]);
		lights_of_selectable[i].SetParameter(GL_LINEAR_ATTENUATION, 1);
		lights_of_selectable[i].Enable();
		
	}
	UpdateLightsofSelectable ();
	
	//Initialize the holes virtual objects
	var aux_mat = CVmMaterial();
   	aux_mat.ambient   = [0.4, 0.4, 0.4, 0.0];
   	aux_mat.diffuse   = [0.6, 0.6, 0.6, 0.0];
   	aux_mat.specular  = [0.8, 0.8, 0.8, 0.0];
   	
   	unselected_mat.shininess = 5;
	var n_holes = Len(holes_position);
	virtual_holes = array(n_holes);
	for(var i = 0; i < n_holes; ++i)
	{
		var box_mesh = CVmNewMesh(VRP_BOX, 0, [0,0,0], [1,0.4,1]);
		box_mesh.CenterBoundingBox();
		virtual_holes[i] = CVmObj(box_mesh);
		virtual_holes[i].SetPosition(holes_position[i]);
		virtual_holes[i].ForceMaterial(aux_mat);
	}
	 
	outputln("Objects initialized!");
	
	//Initialize audio
	var n_sounds = Len(audio_files);
	audio_sources = array(n_sounds);
	for(var i = 0; i < n_sounds; ++i)
	{
		var audio = CVmVRAWav();
		audio_sources[i] = audio;
		audio_sources[i].Load(audio_files[i], false);
	}
	
	outputln("Audio initialized!");
	
	//Initialize the Skybox
	var sky_textures = Array(Len(skybox_files));
	for(var i = 0; i < Len(sky_textures); ++i)
		sky_textures[i] = CVmTexture(skybox_files[i]);
	sky_box = SkyBox();
	sky_box.Initialize(sky_textures, SCENE_FAR);
	outputln("Skybox initialized!");
	
	//Initialize the Terrain from a file
	var tmp = LoadFile(map);
   	height = array(0);
   	for (var i = 0; i < Len(tmp); ++i) {
   		var line = Split(tmp[i], " ");
   		aadd(height, line);
   	}
   	
	var wall_texture = CVmTexture(wall);
	var grass_texture = CVmTexture(grass);
	
	
	renderable_terrain = Terrain();
	renderable_terrain.Initialize(height, grass_texture, wall_texture);
	outputln("Terrain initialized!");
	
	//Initialize user cammera
	CameraInit(height);
	outputln("Camera initialized!");
	
	//OpenGl Inits
	glEnable(GL_BLEND);
	glEnable(GL_NORMALIZE);
	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);
	glEnable(GL_LIGHTING);   
	
	//Play music at the begining of the game
	audio_sources[1].Play();	
}

function UpdateLightsofSelectable ()
{
	var n_selectable = Len(selectable_ini_position);
	for(var i = 0; i < n_selectable; ++i)
	{
		var pos = selectabe_objects[i].GetPosition();
		pos[1] = pos[1] + scaling[i] + 2;
		lights_of_selectable[i].SetPosition(pos);
	}
}

function UpdateObjectsInHoles() 
{
	var n_selectable = Len(selectable_ini_position);
	for(var i = 0; i < n_selectable; ++i)
	{
		var aux = false;
		var correct = false;
		for(var j = 0; j < n_selectable; ++j)
		{
			if(!correct &&  selectabe_objects[i].IsCollidingBBox(virtual_holes[j]))
			{
				aux = true;
				if(i == j && scaling[i] == holes_scales[j]) 
				{
					correct = true;
					if(!in_hole[i]) audio_sources[1].Play();
				}
				else if(!in_hole[i]) audio_sources[0].Play();
			}
		}
		if(!in_hole[i] && aux) in_hole[i] = true;
		if(in_hole[i] && !aux) in_hole[i] = false;
		if(correct) 
		{
			lights_of_selectable[i].SetDiffuse([0, 0.8, 0]);
			lights_of_selectable[i].SetSpecular([0, 0.9, 0]);
		}
		else
		{
			lights_of_selectable[i].SetDiffuse([0.8, 0, 0]);
			lights_of_selectable[i].SetSpecular([0.9, 0, 0]);
		}
		
	}
}

function length(vec) 
{
	return sqrt(vec[0]*vec[0] + vec[1]*vec[1] + vec[2]*vec[2]);
}

function IsSelected(object) 
{
	var viewport = glGet(GL_VIEWPORT);
	var winx = Mouse.X+1;
	var winy = viewport[3]-Mouse.Y;
	var point1=gluUnproject(winx,winy,0.0); 
	var point2=gluUnproject(winx,winy,1.0);
	var pInt=[0,0,0];  	//Will store the closest intersection point (to point1)
	var nrml=[0,0,0];  	//Will store the normal on that point
	var n_TR = 0; 		//Will store the triangle index
	var comp = 0; 		//Will store the component (Characters)
	if (object.IsColliding(point1,point2,&pInt, &nrml, &n_TR, &comp, true, true))
	{
		if(length([pInt[0] - point1[0], pInt[1] - point1[1], pInt[2] - point1[2]]) < MAX_SEL_LENGTH)
			return true;
	}
	return false;
}

function ObjectToMouse(index) {
	var viewport = glGet(GL_VIEWPORT);
	var winx = Mouse.X+1;
	var winy = viewport[3]-Mouse.Y;	
	var aux = gluProject(selectabe_objects[index].GetPosition());
	var p0 = gluUnProject([winx, winy, aux[2] + Mouse.Wheel*0.001]);
	//trace(p0);
	
	if (p0[0] == check_out_of_limits(p0[0], Len(height)/2) &&
		p0[2] == check_out_of_limits(p0[2], Len(height[0])/2)) {

		if (p0[1] > val(height[p0[0]*2][p0[2]*2]) + scaling[index])
			selectabe_objects[index].SetPosition(p0);
	}
}

function ScaleObject(index) {
	scaling[index] *= (1 + Mouse.Wheel*0.01);
	if (scaling[index] > 2)
	 	scaling[index] = 2;
	else if (scaling[index] < 1)
		scaling[index] = 1;
	selectabe_objects[index].SetScale(scaling[index]);	
}

function ScaleObjectTo1Or2(index) {
	if (scaling[index] >= 1.5)
		scaling[index] = 2;
	else if (scaling[index] < 1.5) 
		scaling[index] = 1;
	selectabe_objects[index].SetScale(scaling[index]);	
}

function DrawSelectableObjects() {
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	for(var i = 0; i < Len(selectabe_objects); ++i) {
		selectabe_objects[i].Draw();
	}
	glPopAttrib();	
}

function UpdateSelectableObjects() {
	var already_selected = false;
	for(var i = 0; i < Len(selectabe_objects); ++i) {
		if(Mouse.ButtonL && !onMouseL) {
			if(!already_selected && IsSelected(selectabe_objects[i])) {
				outputln(Mouse.Wheel);
				selected[i] = !selected[i];
				already_selected = true;
			} else {
				selected[i] = false;
			}
		}
	}
	
	if(Mouse.ButtonL) {
		onMouseL = true;
	} else {
		onMouseL = false;
	}
	
	for(var i = 0; i < Len(selectabe_objects); ++i) {
		if (selected[i]) {
			selectabe_objects[i].ForceMaterial(selected_mat);
			if (!Mouse.ButtonR) {
				ObjectToMouse(i);
				ScaleObjectTo1Or2(i);
			} else {
				ScaleObject(i);
			}
		} else {
			selectabe_objects[i].ForceMaterial(unselected_mat);
		}
	}
	UpdateLightsofSelectable ();
	UpdateObjectsInHoles();
}

function isAnyObjectSelected() {
	for(var i = 0; i < Len(selectabe_objects); ++i)
		if(selected[i]) 
			return true;
	return false;
}

function RenderHoles() 
{
	//If it is not Rendered doesen't detect colisions between crates and holes, possible Bug related to Objects
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	for(var i = 0; i < Len(holes_position); ++i)
		virtual_holes[i].Draw(VR_WIREFRAME);
	glPopAttrib();
}

function OnFrame() {
	/* manage camera */
	if (!isAnyObjectSelected())
		CameraMoveMouse(height);
	else
		CameraStandBy();

	SceneBegin();
	
	sky_box.Render(CameraGetPosition());
	renderable_terrain.DrawTerrain();
	
	DrawSelectableObjects();
	RenderHoles();
	//Render must go before colision detection, because otherwise in the first frame to collision is not detected properly(always true)
	UpdateSelectableObjects();
	
	SceneEnd();
}



function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	// TODO:
}


function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}

function OnExit()
{
	// TODO: put your cleanup code here
}


