/* Include s3d symbols */
#include <Script3d.h>
//#include <Camera.s3d.h>
#include "spot_light.s3d"

#include "Camera.s3d"
//#include "sys_camera.s3d"

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000; 


// TODO: put your global variables here


/* Light globals */
var Light0;
var PosL = [0.0, 10.0, 10.0];	// default light position

/* Function declarations */
function DrawTerrain();
function build_wall_list();
function build_floor_list();

/* Other globals */
var map = "map.txt";
var crate = "crate.jpg";
var wall = "wall.png";
var grass = "grass.png";
var mesh_src = "object.aam";

var light_mesh = "lamp.AAM";
/*
function OnDownload()
{
	FileDownload(file_name);
	FileDownload(text_src);
	FileDownload(mesh_src);
	FileDownload(light_mesh);
	
}*/

var wall_texture;
var grass_texture;

var wall_list;
var floor_list;

var height;


var selectabe_objects;
var selected_mat;
var unselected_mat;

function OnDownload() {
	FileDownload(light_mesh);
	
	FileDownload(map);
	FileDownload(mesh_src);
	
	FileDownload(grass);
	FileDownload(wall);
}

function OnInit(params) {
	CameraInit();
	
	/* initialize light */
	/*
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();
	*/
	Light0 = SpotlLight();
	var Lpo = [4,2,4];
	Light0.Initialize(Lpo);
	var l_mesh = CVmNewMesh(light_mesh);
	Light0.SetRenderableObject(l_mesh);//CVmObj(l_mesh));
	Light0.Update();
/*
	var my_light = CVmLight();
  	 my_light.SetDiffuse(1,1,1);
   	my_light.SetAmbient(1,1,1);
   	my_light.SetSpecular(0,0,0);
   my_light.SetPosition(5,5,5);
   my_light.Enable();
*/	
	var tmp = LoadFile(map);
   	height = array(0);
   	for (var i = 0; i < Len(tmp); ++i) {
   		var line = Split(tmp[i], " ");
   		aadd(height, line);
   	}
   	
	wall_texture = CVmTexture(wall);
	grass_texture = CVmTexture(grass);
	
	build_wall_list();
	build_floor_list();
	
	
	
	//Initialize selecction Mats
	selected_mat = CVmMaterial();
   	selected_mat.ambient   = [0.7, 0.0, 0.0, 1.0];
   	selected_mat.diffuse   = [0.8, 1.0, 0.0, 1.0];
   	selected_mat.specular  = [0.9, 0.9, 0.9, 1.0];
   	selected_mat.shininess = 5;
   	
	unselected_mat = CVmMaterial();
   	unselected_mat.ambient   = [0.7, 0.7, 0.7, 1.0];
   	unselected_mat.diffuse   = [0.8, 0.8, 0.8, 1.0];
   	unselected_mat.specular  = [0.9, 0.9, 0.9, 1.0];
   	unselected_mat.shininess = 5;
   	
	//Initialize selectable objects
	var num_seg = 30;
	var radius = 1;
	var hemisphere = 1;  //0.5= hemisphere, 1= sphere
	var sphere_mesh = CVmNewMesh(VRP_SPHERE , num_seg, radius, hemisphere);  
	var sphere = CVmObj(sphere_mesh);
	//sphere.LinkToMesh(sphere_mesh);
	sphere.SetPosition([5,2,5]);
	sphere.ForceMaterial(unselected_mat);
	selectabe_objects = {sphere};
	
	var sphere2 = CVmObj(CVmNewMesh(VRP_SPHERE , num_seg, radius, hemisphere));
	sphere2.SetPosition([5,4,5]);
	//selectabe_objects[1] = sphere2;
	sphere2.ForceMaterial(unselected_mat);
	aadd( selectabe_objects, sphere2);

	
	//OpenGl Inits
	glEnable(GL_BLEND);
	glEnable(GL_NORMALIZE);
	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);
	glEnable(GL_LIGHTING);
	
	
	//var m_mesh = CVmNewMesh(mesh_src); // The mesh is created from the specified AAM file
   	//m_mesh.CenterBoundingBox();      // Mesh geometry is translated so as to put the origin in the center of the mesh bounding box
   	//m_mesh.Normalize(10); 
   	//global my_obj = CVmObj(m_mesh);
   	//my_obj.SetPosition(Lpo[0], Lpo[1], Lpo[2]+10);
   	
}


function IsSelected(object) 
{
	var viewport = glGet(GL_VIEWPORT);
	var winx = Mouse.X+1;
	var winy = viewport[3]-Mouse.Y;
	var point1=gluUnproject(winx,winy,0.0); 
	var point2=gluUnproject(winx,winy,1.0) * SCENE_FAR;
	var pInt=[0,0,0];  //Will store the closest intersection point (to point1)
	var nrml=[0,0,0];  //Will store the normal on that point
	var n_TR = 0; //Will store the triangle index
	var comp = 0; //Will store the component (Characters)
	if (object.IsColliding(point1,point2,&pInt, &nrml, &n_TR, &comp, true, true))
	{
		return true;
	}
	return false;
}

function ObjectToMouse(object) 
{
	var viewport = glGet(GL_VIEWPORT);
	var winx = Mouse.X+1;
	var winy = viewport[3]-Mouse.Y;	
	var aux = gluProject(object.GetPosition());
	var p0 = gluUnProject([winx, winy, aux[2]]);
	trace(p0);

	object.SetPosition(p0);
}

function DrawSelectableObjects() 
{
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	var already_sel = false;
	for(var i = 0; i < Len(selectabe_objects); ++i)
	{
		if(Mouse.ButtonL)
		{
			if(!already_sel && IsSelected(selectabe_objects[i])) {
				already_sel = true;
				outputln("\nSelected ", i);
				ObjectToMouse(selectabe_objects[i]);
				selectabe_objects[i].ForceMaterial(selected_mat);
				
			}
		}
		else 
		{
				selectabe_objects[i].ForceMaterial(unselected_mat);
		}
		selectabe_objects[i].Draw();
	}
	glPopAttrib();	
}
function OnFrame() {
	/* manage camera */
	CameraMoveMouse(height);

	SceneBegin();
	
	Light0.Rotate(0, 0.1);
	Light0.Update();
	Light0.Render();
	//DrawGrid([0.5, 0.5, 0.5], 100);
	DrawTerrain();
	DrawSelectableObjects();
	

/*
	//if(FileExists(map)) {
		//var file_string = LoadFile(map);
		//var file_string = FileRead(map);
		//ConsoleText(0.01,0.86,file_string[0]);
	//}
	
	
	SetActiveTexture(my_texture_foo); 
      glEnable(GL_TEXTURE_2D);
      glBegin(GL_QUADS);
         glNormal(0,0,1);      
         glTexCoord(0,1); 
         glVertex(0,0,0);         
         glTexCoord(1,1);
         glVertex(10,0,0);      
         glTexCoord(1,0);
         glVertex(10,10,0);      
         glTexCoord(0,0);
         glVertex(0,10,0);      
      glEnd(); 
      
    glPolygonOffset(1.5, 2);
    my_obj.Draw();
*/

	SceneEnd();
}



function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	// TODO:
}


function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}

function OnExit()
{
	// TODO: put your cleanup code here
}


function DrawTerrain() {
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	//glDisable(GL_LIGHTING);

	glEnable(GL_TEXTURE_2D);
	SetActiveTexture(grass_texture, VR_BILINEAR_FILTER, 0);
	glCallList(floor_list);
	
	SetActiveTexture(wall_texture, VR_FORCE_TEXTURE, 0);
	glCallList(wall_list);
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}


function build_floor_list() {
	var multiplier = 2.0;

	floor_list = glGenLists(1);
	glNewList(floor_list, GL_COMPILE);
	glBegin(GL_TRIANGLES);
		for (var i = 0; i < Len(height); ++i) {
			for (var j = 0; j < Len(height[i]); ++j) {
				glNormal(0,1,0);
				glTexCoord(0,0); 
				glVertex(multiplier*i,     val(height[i][j]), multiplier*j);
				glTexCoord(0,1); 
				glVertex(multiplier*i,     val(height[i][j]), multiplier*(j+1));
				glTexCoord(1,0); 
				glVertex(multiplier*(i+1), val(height[i][j]), multiplier*j);
				
				glTexCoord(0,1); 
				glVertex(multiplier*i,     val(height[i][j]), multiplier*(j+1));
				glTexCoord(1,1); 
				glVertex(multiplier*(i+1), val(height[i][j]), multiplier*(j+1));
				glTexCoord(1,0); 
				glVertex(multiplier*(i+1), val(height[i][j]), multiplier*j);
			}
		}
	glEnd();
	glEndList();
	outputln("\nwall list = ", floor_list);
}

function build_wall_list() {
	var multiplier = 2.0;
	
	wall_list = glGenLists(1);
	glNewList(wall_list, GL_COMPILE);
	glBegin(GL_TRIANGLES);
		for (var i = 0; i < Len(height); ++i) {
			for (var j = 1; j < Len(height[i]); ++j) {
				if (height[i][j] != height[i][j-1]) {
					var size = abs(val(height[i][j]) - val(height[i][j-1]))/multiplier; 
					glTexCoord(1,0); 
					glVertex(multiplier*(i+1), val(height[i][j-1]), multiplier*j);
					glTexCoord(0,0); 
					glVertex(multiplier*i,     val(height[i][j-1]), multiplier*j);
					glTexCoord(0,size); 
					glVertex(multiplier*i,     val(height[i][j]),   multiplier*j);
					
					glTexCoord(1,0); 
					glVertex(multiplier*(i+1), val(height[i][j-1]), multiplier*j);
					glTexCoord(0,size); 
					glVertex(multiplier*i,     val(height[i][j]),   multiplier*j);
					glTexCoord(1,size); 
					glVertex(multiplier*(i+1), val(height[i][j]),   multiplier*j);
				}
			}
		}
		
		for (var i = 1; i < Len(height); ++i) {
			for (var j = 0; j < Len(height[i]); ++j) {
				if (height[i][j] != height[i-1][j]) {
					var size = abs(val(height[i][j]) - val(height[i-1][j]))/multiplier; 
					glTexCoord(0,0); 
					glVertex(multiplier*i, val(height[i-1][j]), multiplier*j);
					glTexCoord(0,1); 
					glVertex(multiplier*i, val(height[i-1][j]), multiplier*(j+1));
					glTexCoord(size,0); 
					glVertex(multiplier*i, val(height[i][j]),   multiplier*j);
					
					glTexCoord(size,0); 
					glVertex(multiplier*i, val(height[i][j]),   multiplier*j);
					glTexCoord(0,1); 
					glVertex(multiplier*i, val(height[i-1][j]), multiplier*(j+1));
					glTexCoord(size,1); 
					glVertex(multiplier*i, val(height[i][j]),   multiplier*(j+1));
				}
			}
		}
	glEnd();
	glEndList();
	outputln("\nfloor list = ", wall_list);
}