#ifndef _TUTORIAL_CAMERA_H_
#define _TUTORIAL_CAMERA_H_

/*                                       _
 *   ___ __ _ _ __ ___   ___ _ __ __ _  | |__
 *  / __/ _` | '_ ` _ \ / _ \ '__/ _` | | '_ \ 
 * | (_| (_| | | | | | |  __/ | | (_| |_| | | |
 *  \___\__,_|_| |_| |_|\___|_|  \__,_(_)_| |_|
 *
 * XVR Cameras - ver 0.1beta2 - 2009-05
 *
 */

/* CameraMoveMouse_Centered(CameraGetCurrent(), 0.25, 0.1); */
function CameraMoveMouse_Centered(cam, rot_sensitivity_x, rot_sensitivity_y);

/* CameraMoveMouse_MBL_BS(CameraGetCurrent(), 0.01, 0.01, 0.01); */
function CameraMoveMouse_MBL_BS(cam, rot_sensitivity, trasl_sensitivity, ytrasl_sensitivity);

/* CameraMoveMouse_MBL_LC(CameraGetCurrent(), 0.001, 0.01); */
function CameraMoveMouse_MBL_LC(cam, trasl_sensitivity, rot_sensitivity);

/* CameraMoveMouse_Target(CameraGetCurrent(), [10.0, 150.0], [10.0, 100.0], 0.25, 0.1, 0.1); */
function CameraMoveMouse_Target(cam, dlim, rotlim, rot_sensitivity_x, rot_sensitivity_y, zoom_sensitivity);

/* default values: 0.25, 0.1 */
function CameraMoveMouse_Centered(cam, rot_sensitivity_x, rot_sensitivity_y)
{
	if (cam == VOID)
		cam = CameraGetCurrent();
	if (rot_sensitivity_x == VOID)
		rot_sensitivity_x = 0.25;
	if (rot_sensitivity_y == VOID)
		rot_sensitivity_y = 0.1;
		
	/* TODO: these variables should be relative to the current camera */
	static var InMouseR = false, InMouseL = false;
	static var PrecX = 0, PrecY = 0;
	static var RotX = 0, RotY = 0;
	static var X = RotX, Y = RotY;
	
	if (Mouse.ButtonL)
	{	
		if (InMouseL)
		{	
			X = RotX + (Mouse.X - PrecX) * rot_sensitivity_x;
			Y = RotY - (Mouse.Y - PrecY) * rot_sensitivity_y;
			
			if (Y > 70)
				Y = 70;
			if (Y < -70)
				Y = -70;
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseL = true;		
	}
	else
	{
		if(InMouseL)
		{
			RotX = X; RotY = Y;
			InMouseL = false;
		}
	}
	
	cam.SetRotation(-Y, 1, 0, 0);
	cam.RotateGlobal(X, 0, 1, 0);
}

/* default values: 0.01, 0.01, 0.01 */
function CameraMoveMouse_MBL_BS(cam, rot_sensitivity, trasl_sensitivity, ytrasl_sensitivity)
{
	if (cam == VOID)
		cam = CameraGetCurrent();
	if (rot_sensitivity == VOID)
		rot_sensitivity = 0.01;
	if (trasl_sensitivity == VOID)
		trasl_sensitivity = 0.01;
	if (ytrasl_sensitivity == VOID)
		ytrasl_sensitivity = 0.01;

	/* TODO: these variables should be relative to the current camera */
	static var InMouseR = false, InMouseL = false;
	static var PrecX = 0, PrecY = 0;
	
	if (Mouse.ButtonL)
	{
		if (InMouseL)
		{	
			cam.RotateGlobal((Mouse.X - PrecX) * rot_sensitivity, 0, 1, 0);
			cam.SetPosition(cam.GetPosition() - cam.GetDirection() * ((Mouse.Y - PrecY) * trasl_sensitivity));
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseL = true;		
	}
	else
		InMouseL = false;

	if (Mouse.ButtonR)
	{
		if (InMouseR)
		{
			cam.SetPosition(cam.GetPosition() + [0.0, (PrecY - Mouse.Y) * ytrasl_sensitivity, 0.0]);
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseR = true;
	}
	else
		InMouseR = false;
}

/* default values: 0.001, 0.01 */
function CameraMoveMouse_MBL_LC(cam, trasl_sensitivity, rot_sensitivity)
{
	if (cam == VOID)
		cam = CameraGetCurrent();
	if (trasl_sensitivity == VOID)
		trasl_sensitivity = 0.001;
	if (rot_sensitivity == VOID)
		rot_sensitivity = 0.01;
	
		
	/* TODO: these variables should be relative to the current camera */
	static var InMouseR = false, InMouseL = false;				
	static var PrecX = 0, PrecY = 0;

	if (Mouse.ButtonL && !Mouse.ButtonR)
	{
		/* left button: camera rotation */
		if (InMouseL)
		{			
			cam.RotateGlobal((Mouse.X - PrecX) * rot_sensitivity, 0, 1, 0);
			cam.RotateLocal((Mouse.Y - PrecY) * rot_sensitivity, 1, 0, 0);		
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseL = true;
		InMouseR = false;
	}
	else if (Mouse.ButtonR)
	{
		/* right button: camera translation */
		if (InMouseR)
		{
			if (Mouse.ButtonL)
			{
				var y_trasl = -cam.GetYAxis() * (Mouse.Y - PrecY); 
				cam.SetPosition(cam.GetPosition() + y_trasl * trasl_sensitivity);
			}
			else
			{
				var x_trasl = cam.GetXAxis() * (Mouse.X - PrecX);
				var z_trasl = cam.GetZAxis() * (Mouse.Y - PrecY);
				cam.SetPosition(cam.GetPosition() + (z_trasl + x_trasl) * trasl_sensitivity);
			}
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseR = true;
		InMouseL = false;
	}	
	else
	{
		InMouseR = false;
		InMouseL = false;
	}
}

/* default: [10.0, 150.0], [10.0, 100.0], 0.25, 0.1, 0.1 */
function CameraMoveMouse_Target(cam, dlim, rotlim, rot_sensitivity_x, rot_sensitivity_y, zoom_sensitivity)
{
	if (cam == VOID)
		cam = CameraGetCurrent();
	if (dlim == VOID)
		dlim = [10.0, 150.0];
	if (rotlim == VOID)
		rotlim = [10.0, 100.0];
	if (rot_sensitivity_x == VOID)
		rot_sensitivity_x = 0.25;
	if (rot_sensitivity_y == VOID)
		rot_sensitivity_y = 0.1;
	if (zoom_sensitivity == VOID)
		zoom_sensitivity = 0.1;
	
	static var InMouseR = false, InMouseL = false;
	static var PrecX = 0, PrecY = 0;
	static var inivec = CameraGetCurrent().GetTarget() - CameraGetCurrent().GetPosition();
	static var RotX = 270+atan2(inivec.z,inivec.x)*RAD_TO_GRAD;
	static var RotY = 180+atan2(inivec.z,inivec.y)*RAD_TO_GRAD;
	static var Distance = modulus(inivec);
	static var X = RotX, Y = RotY, D = Distance;
		
	if (Mouse.ButtonL)
	{
		if (InMouseL)
		{	
			X = RotX - (Mouse.X - PrecX) * rot_sensitivity_x;		
			Y = RotY + (Mouse.Y - PrecY) * rot_sensitivity_y;

			if (Y < rotlim[0])
				Y = rotlim[0]; // Rotation Upper limit
			if (Y > rotlim[1])
				Y = rotlim[1]; // Rotation lower limit
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseL = true;		
	}
	else
		if( InMouseL )
		{
			RotX = X;
			RotY = Y;
			InMouseL = false;
		}

	if (!Mouse.ButtonL && Mouse.ButtonR)
	{
		if (InMouseR)
		{
			D = Distance - (PrecY - Mouse.Y) * zoom_sensitivity;
			if (D < dlim[0])
				D = dlim[0]; // Zoom in limit
			if (D > dlim[1])
				D = dlim[1]; // Zoom out limit
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseR = true;
	}
	else
		if(InMouseR)
		{
			Distance = D;
			InMouseR = false;
		}

	var pos = VectorRotate(-Y, 1, 0, 0, [0, D, 0]);
	var Temp = VectorRotate(X, 0, 1, 0, [pos.x, 0, pos.z]);

	Temp.y = pos.y;
	cam.SetPosition(Temp + cam.GetTarget());
	
}

#endif // _TUTORIAL_CAMERA_H_
